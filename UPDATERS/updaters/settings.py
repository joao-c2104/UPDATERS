"""
Django settings for updaters project.
Generated by 'django-admin startproject' using Django 5.2.7.
"""

from pathlib import Path
import os
import dj_database_url
from decouple import config  # <--- Importamos o decouple

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Configurações de Segurança e Deploy ---

# SECRET_KEY agora é lida do arquivo .env (local) ou do ambiente (produção)
SECRET_KEY = config('SECRET_KEY')

# DEBUG é lido da mesma forma. 'False' é o padrão se a variável não existir.
DEBUG = config('DEBUG', default=False, cast=bool)

# Lista de hosts permitidos
ALLOWED_HOSTS = []

# Puxa o hostname do Render automaticamente, se existir
RENDER_EXTERNAL_HOSTNAME = config('RENDER_EXTERNAL_HOSTNAME', default=None)

if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
else:
    # Permite acesso local no modo de desenvolvimento
    ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])

# --- Fim da Configuração de Segurança ---


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',  # <--- Adicionado para WhiteNoise
    'feed',                          # seu app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # <--- Adicionado (logo após Security)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'updaters.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [(os.path.join(BASE_DIR,'templates'))],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'updaters.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuração dinâmica de Banco de Dados (Postgres em produção, SQLite em dev)
if 'DATABASE_URL' in os.environ:
    # Configuração de Produção (lê a variável DATABASE_URL do Render)
    DATABASES = {
        'default': dj_database_url.config(
            conn_max_age=600,
            ssl_require=True  # <--- Necessário para conexões seguras no Render
        )
    }
else:
    # Configuração de Desenvolvimento (usa o SQLite local)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# ... (sem mudanças aqui) ...
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
# ... (sem mudanças aqui) ...
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I1N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
# Local onde o 'collectstatic' vai juntar todos os arquivos estáticos
STATIC_ROOT = BASE_DIR / 'staticfiles'  # <--- Modificado para a pasta 'staticfiles'

# Configuração de armazenamento do WhiteNoise para servir arquivos em produção
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'  # <--- Adicionado

# Comentamos isso, pois seus arquivos estáticos estão dentro do app 'feed'
# e 'APP_DIRS': True já cuida de encontrá-los.
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATICFILES_DIRS = [BASE_DIR / 'static']

# Default primary key field type
# ... (sem mudanças aqui) ...
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'